name: Ouch CD Workflow using github actions & docker

on:
  push:
    branches: [ "release" ]  # release 브랜치에 push될 때만 동작

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build jar
        run: ./gradlew --info clean bootJar -x test

      - name: docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: docker build and push
        uses: docker/build-push-action@v5.1.0
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPOSITORY }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push-image

    steps:
      - name: SSH into EC2 and deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # docker-compose 설치 여부 확인, 없으면 설치
            if ! command -v docker-compose &> /dev/null
            then
              sudo apt-get update
              sudo apt-get install -y docker-compose-plugin
            fi

            # Docker 이미지 정리
            docker system prune -af || true

            # 최신 이미지 pull
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPOSITORY }}:latest

            # docker-compose.yml 생성
            echo "version: '3'" > /home/ubuntu/docker-compose.yml
            echo "services:" >> /home/ubuntu/docker-compose.yml
            echo "  app:" >> /home/ubuntu/docker-compose.yml
            echo "    image: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPOSITORY }}:latest" >> /home/ubuntu/docker-compose.yml
            echo "    container_name: app" >> /home/ubuntu/docker-compose.yml
            echo "    restart: always" >> /home/ubuntu/docker-compose.yml
            echo "    ports:" >> /home/ubuntu/docker-compose.yml
            echo "      - '8080:8080'" >> /home/ubuntu/docker-compose.yml
            echo "    env_file:" >> /home/ubuntu/docker-compose.yml
            echo "      - .env" >> /home/ubuntu/docker-compose.yml
            echo "    read_only: true" >> /home/ubuntu/docker-compose.yml
            echo "    tmpfs:" >> /home/ubuntu/docker-compose.yml
            echo "      - /tmp" >> /home/ubuntu/docker-compose.yml
            echo "    healthcheck:" >> /home/ubuntu/docker-compose.yml
            echo "      test: [\"CMD\",\"curl\",\"-f\",\"http://localhost:8080/actuator/health\"]" >> /home/ubuntu/docker-compose.yml
            echo "      interval: 30s" >> /home/ubuntu/docker-compose.yml
            echo "      timeout: 5s" >> /home/ubuntu/docker-compose.yml
            echo "      retries: 3" >> /home/ubuntu/docker-compose.yml

            # .env 파일 생성
            echo "SPRING_PROFILES_ACTIVE=prod" > /home/ubuntu/.env
            echo "RDS_HOST=${{ secrets.RDS_HOST }}" >> /home/ubuntu/.env
            echo "RDS_PORT=${{ secrets.RDS_PORT }}" >> /home/ubuntu/.env
            echo "RDS_DB=${{ secrets.RDS_DB }}" >> /home/ubuntu/.env
            echo "RDS_USERNAME=${{ secrets.RDS_USERNAME }}" >> /home/ubuntu/.env
            echo "RDS_PASSWORD=${{ secrets.RDS_PASSWORD }}" >> /home/ubuntu/.env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> /home/ubuntu/.env
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> /home/ubuntu/.env
  
            # .env 파일 권한 설정
            chmod 600 /home/ubuntu/.env
            
            # 기존 app 컨테이너 강제 제거 (없어도 에러 무시)
            docker rm -f app || true
            
            # docker-compose pull
            docker compose -f /home/ubuntu/docker-compose.yml pull
            
            # docker-compose 재배포
            docker compose -f /home/ubuntu/docker-compose.yml up -d --force-recreate --remove-orphans

      - name: Send Discord Notification
        if: always()
        run: |
          STATUS="${{ job.status }}"
          if [ "$STATUS" == "success" ]; then
            EMOJI="✅"
          else
            EMOJI="❌"
          fi
          
          # 반복 폴링 헬스체크
          HEALTH_STATUS="❌ 서버 비정상 작동"
          for i in {1..12}; do
          if curl -sSf http://localhost:8080/actuator/health; then
          HEALTH_STATUS="✅ 서버 정상 작동"
          break
          fi
          sleep 5
          done
          
          MESSAGE="$EMOJI **Ouch 배포 결과**\\n상태: $STATUS\\n$HEALTH_STATUS\\n🔗 프로젝트: ${{ github.repository }}\\n👤 커밋: ${{ github.actor }}"
          
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \"$MESSAGE\"}" \
               ${{ secrets.DISCORD_WEBHOOK_URL }} || true
