name: Ouch CD Workflow using github actions & docker

on:
  push:
    branches: [ "release" ]  # release 브랜치에 push될 때만 동작

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build jar
        run: ./gradlew --info clean bootJar -x test

      - name: docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: docker build and push
        uses: docker/build-push-action@v5.1.0
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPOSITORY }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push-image

    steps:
      - name: SSH into EC2 and deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # docker-compose 설치 여부 확인
            if ! command -v docker-compose &> /dev/null
            then
              sudo apt-get update
              sudo apt-get install -y docker-compose-plugin
            fi

            # Docker 이미지 정리
            docker system prune -af || true

            # 최신 이미지 pull
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPOSITORY }}:latest

            # docker-compose.yml 생성
            cat <<EOF > /home/ubuntu/docker-compose.yml
version: '3'
services:
  app:
    image: \${{ secrets.DOCKER_HUB_USERNAME }}/\${{ secrets.DOCKER_HUB_REPOSITORY }}:latest
    container_name: app
    restart: always
    ports:
      - '8080:8080'
    env_file:
      - .env
    read_only: true
    tmpfs:
      - /tmp
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 5s
      retries: 3
EOF
  
            # .env 파일 생성
            cat <<EOF > /home/ubuntu/.env
SPRING_PROFILES_ACTIVE=prod
RDS_HOST=\${{ secrets.RDS_HOST }}
RDS_PORT=\${{ secrets.RDS_PORT }}
RDS_DB=\${{ secrets.RDS_DB }}
RDS_USERNAME=\${{ secrets.RDS_USERNAME }}
RDS_PASSWORD=\${{ secrets.RDS_PASSWORD }}
JWT_SECRET=\${{ secrets.JWT_SECRET }}
OPENAI_API_KEY=\${{ secrets.OPENAI_API_KEY }}
EOF
  
            # .env 파일 권한 설정
            chmod 600 /home/ubuntu/.env
  
            # docker-compose pull
            docker compose -f /home/ubuntu/docker-compose.yml pull

            # docker-compose 재배포
            docker compose -f /home/ubuntu/docker-compose.yml down || true
            docker compose -f /home/ubuntu/docker-compose.yml up -d

      - name: Send Discord Notification
        if: always()
        run: |
          STATUS="${{ job.status }}"
          if [ "$STATUS" == "success" ]; then
            EMOJI="✅"
          else
            EMOJI="❌"
          fi
          
          # 서버 Healthcheck
          sleep 5
          HEALTH=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/actuator/health || true)
          if [ "$HEALTH" == "200" ]; then
            HEALTH_STATUS="✅ 서버 정상 작동"
          else
            HEALTH_STATUS="❌ 서버 비정상 작동"
          fi
          
          MESSAGE="$EMOJI **Ouch 배포 결과**\\n상태: $STATUS\\n$HEALTH_STATUS\\n🔗 프로젝트: ${{ github.repository }}\\n👤 커밋: ${{ github.actor }}"
          
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \"$MESSAGE\"}" \
               ${{ secrets.DISCORD_WEBHOOK_URL }} || true
