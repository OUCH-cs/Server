name: Ouch CD Workflow using github actions & docker

on:
  push:
    branches: [ "release" ]  # release 브랜치에 push될 때만 동작

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4    # 저장소 코드를 가져옴

      - name: Set up JDK 17    # 자바 설치
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew    # gradlew 실행 권한 부여

      - name: Gradle Caching    # Gradle 빌드 캐싱을 통해 속도 향상
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build jar
        run: ./gradlew --info clean bootJar -x test   # 테스트는 생략하고 bootJar로 .jar 파일 생성

      - name: docker login   # Docker Hub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: docker build and push   #Docker 이미지 빌드 & 푸시
        uses: docker/build-push-action@v5.1.0
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPOSITORY }}:latest
#          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPOSITORY }}:latest
#          cache-to: type=inline  # 빌드 시 캐시 활용이 필요하면 추가(깃허브 액션)

  deploy:  # SSH 접속 방식 (Self-hosted Runner 방식X) # 배포 자동화
    runs-on: ubuntu-latest
    needs: build-and-push-image  # build가 끝난 후 실행됨

    steps:
      - name: SSH into EC2 and deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPOSITORY }}:latest

            docker stop app || true
            docker rm app || true

            docker run -d \
              --name app \
              --restart unless-stopped \
              -p 8080:8080 \
              --env SPRING_PROFILES_ACTIVE=prod \
              --env RDS_HOST=${{ secrets.RDS_HOST }} \
              --env RDS_PORT=${{ secrets.RDS_PORT }} \
              --env RDS_DB=${{ secrets.RDS_DB }} \
              --env RDS_USERNAME=${{ secrets.RDS_USERNAME }} \
              --env RDS_PASSWORD=${{ secrets.RDS_PASSWORD }} \
              --env OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
              --env JWT_SECRET=${{ secrets.JWT_SECRET }} \
              ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPOSITORY }}:latest

      # 디스코드 배포 알림
      - name: Send Discord Notification
        run: |
          STATUS="${{ job.status }}"
          MESSAGE="🚀 **Ouch 배포 완료**\n배포 상태: $STATUS\n🔗 프로젝트: ${{ github.repository }}\n👤 커밋: ${{ github.actor }}"
          
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \"$MESSAGE\"}" \
               ${{ secrets.DISCORD_WEBHOOK_URL }}