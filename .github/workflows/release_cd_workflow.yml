name: Ouch CD Workflow

on:
  push:
    branches: [ "release" ]  # release 브랜치에 push될 때만 동작

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4    # 저장소 코드를 가져옴
      - name: Set up JDK 17    # 자바 설치
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew    # gradlew 실행 권한 부여

      - name: Gradle Caching    # Gradle 빌드 캐싱을 통해 속도 향상
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build jar
        run: ./gradlew --info clean bootJar -x test   # 테스트는 생략하고 bootJar로 .jar 파일 생성

      - name: docker login   # Docker Hub 로그인
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: docker build and push   #Docker 이미지 빌드 & 푸시
        uses: docker/build-push-action@v5.1.0
        with:
          context: .
          push: true
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPOSITORY }}:latest
          cache-to: type=inline
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPOSITORY }}:latest

  deploy:  # SSH 접속 방식 (Self-hosted Runner 방식X) # 배포 자동화
    runs-on: ubuntu-latest
    needs: build-and-push-image  # build가 끝난 후 실행됨

    steps:
      - name: SSH into EC2 and deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPOSITORY }}:latest

            docker stop app || true
            docker rm app || true

            docker run -d \
              --name app \
              -p 8080:8080 \
              ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPOSITORY }}:latest
